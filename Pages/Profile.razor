@using Login_Kata_Blazor.Data;
@inject IAdministration administration;
@page "/profile"

<PageTitle>User Profile</PageTitle>

<center>
    <div class="col-8">
        <div class="col-12 row">
            <p>&nbsp;</p>
        </div>
        <div class="col-12 row">
            <div class="col-6" style="border-right:groove">
                <img src="/img/background_image.png" width="600px" height="400px" />
            </div>
            <div class="col-6" style="border-left:groove">
                <EditForm Model="@user" OnValidSubmit="@ValidateUser">
                        <div class="col-12 row">
                            <input class="form-control col-12" @bind="user.Email" placeholder="Email" />
                        </div>
                        <br />
                        <div class="col-12 row">
                            <input class="form-control col-12" @bind="user.Nickname" placeholder="Nickname" />
                        </div>
                        <br />
                        <div class="col-12 row">
                            <input type="password" class="form-control col-12" @bind="user.Password" placeholder="Password" />
                        </div>
                        <br />                      
                        <div class="col-12 row">
                            <span class="col-12"></span>
                            <input type="submit" class="form-control col-6 btn btn-primary" value="Save" />
                        </div>
                        <br />
                        <div class="col-12 row" style="text-align:left; font-weight:bold">
                            <span class="col-12">@Message</span>
                        </div>
                </EditForm>
            </div>
        </div>
        <div class="col-12 row">
            <p>&nbsp;</p>
        </div>
    </div>
</center>


@code {

    private User user;
    public string Message { get; set; }


    protected override void OnInitialized(){
        user = new User();
    }
     private async Task<bool> ValidateUser()
    {
        //assume that user is valid
        //call an API
/*
        var returnedUser = await userService.LoginAsync(user);

        if (returnedUser.EmailAddress != null)
        {
            await ((CustomAuthenticationStateProvider)AuthenticationStateProvider).MarkUserAsAuthenticated(returnedUser);
            NavigationManager.NavigateTo("/index");
        }
        else
        {
            LoginMessage = "Invalid username or password";
        }
*/
        return await Task.FromResult(true);
    }
}